---
description: 
globs: apps/mobile/**/*
alwaysApply: false
---
# Mobile Application (apps/mobile)

## Overview

The `apps/mobile` directory contains the React Native (Expo) mobile application. It provides native mobile experiences for iOS and Android platforms.

## Key Directories

-   **[src/app](mdc:apps/mobile/src/app)**: Contains the main application screens and navigation structure, likely using Expo Router conventions (file-based routing).
    -   `(tabs)`: Directory structure for tab-based navigation.
    -   `auth`: Authentication-related screens.
    -   `settings`: User settings screens.
-   **[src/components](mdc:apps/mobile/src/components)**: Contains React Native components specific to the mobile application, organized by feature (auth, common, settings).
-   **[src/lib](mdc:apps/mobile/src/lib)**: Includes mobile-specific libraries and utilities (API clients, auth helpers, hooks, environment variables).
-   **[src/providers](mdc:apps/mobile/src/providers)**: Contains context providers used throughout the mobile app.
-   **[src/assets](mdc:apps/mobile/src/assets)**: Mobile-specific assets like styles.
-   **[public](mdc:apps/mobile/public)**: Static assets like icons and splash screens.
-   **[ios/](mdc:apps/mobile/ios)** & **[android/](mdc:apps/mobile/android)**: Native project configuration files (managed by Expo Prebuild).

## Technology Stack

-   **Framework**: React Native with Expo
-   **UI**: React Native components, likely utilizing shared components from **[packages/ui/mobile](mdc:packages/ui/mobile)**.
-   **Navigation**: Expo Router (file-based routing, built on React Navigation).
-   **Styling**: Likely using standard React Native stylesheets, potentially with helper utilities.

## Key Conventions & Integrations

-   Follows the general **[Code Conventions](mdc:.cursor/rules/02-code-conventions.mdc)**.
-   Integrates with shared packages:
    -   **[auth](mdc:packages/auth)** for user authentication.
    -   **[api](mdc:packages/api)** client (potentially via `src/lib/api`) for backend communication.
    -   **[ui/mobile](mdc:packages/ui/mobile)** for shared mobile components.
    -   **[analytics/mobile](mdc:packages/analytics/mobile)** for analytics.
-   **Safe Area Management**: Uses `react-native-safe-area-context` for handling screen insets.
-   **Performance**: Focus on native performance optimization techniques (see below).

## Platform Specifics & Performance

-   **Safe Area Management**:
    -   Use `SafeAreaProvider` globally.
    -   Wrap top-level components with `SafeAreaView`.
    -   Use `SafeAreaScrollView` for scrollable content.
    -   Avoid hardcoding padding/margins for safe areas.
-   **Performance Optimization**:
    -   Minimize `useState`/`useEffect`; prefer `useContext`/reducers.
    -   Use Expo's `SplashScreen` for better startup.
    -   Optimize images (`expo-image`, WebP, lazy loading).
    -   Use code splitting/lazy loading (React Suspense, dynamic imports).
    -   Profile with React Native/Expo tools.
    -   Memoize components (`React.memo`, `useMemo`, `useCallback`).

## Guidance

-   When dealing with UI elements, check both `apps/mobile/src/components` and `packages/ui/mobile/src/components`.
-   For backend interactions, look at how API calls are made, likely through utilities in `apps/mobile/src/lib/api` which might use `packages/api`.
-   Routing is managed by the directory structure in `apps/mobile/src/app` via Expo Router.
-   Authentication flow involves components in `apps/mobile/src/components/auth` and integration with `packages/auth`.
-   Pay attention to mobile-specific concerns like Safe Area handling and native performance optimization techniques outlined above.