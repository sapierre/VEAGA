---
description: 
globs: apps/extension/**/*
alwaysApply: false
---
# Browser Extension (`apps/extension`)

## Overview

The `apps/extension` directory contains the browser extension, built using the WXT framework (Vite + React). It provides features that integrate with the user's browser environment.

## Key Directories

-   **[src/app](mdc:apps/extension/src/app)**: Contains the core logic for different parts of the extension.
    -   `background`: Background scripts for persistent logic and event handling.
    -   `content`: Content scripts injected into web pages to interact with DOM.
    -   `popup`: UI code for the extension's popup window.
    -   `options`: UI code for the extension's options page.
    -   `sidepanel`: UI code for the extension's side panel (if applicable).
    -   `devtools`: Code for custom devtools panels.
    -   `newtab`: Code for a custom new tab page (if applicable).
-   **[src/components](mdc:apps/extension/src/components)**: Contains React components specific to the extension's UI (popup, options, sidepanel, etc.).
-   **[src/lib](mdc:apps/extension/src/lib)**: Includes extension-specific libraries and utilities (messaging, storage, API clients, auth helpers).
-   **[src/assets](mdc:apps/extension/src/assets)**: Extension-specific assets like styles and icons.
-   **[public](mdc:apps/extension/public)**: Static assets copied to the build output (e.g., `manifest.json` base, icons).
-   **[.wxt/](mdc:apps/extension/.wxt)**: WXT build and type generation cache.
-   **[entrypoints/](mdc:apps/extension/entrypoints)**: (Implicitly managed by WXT based on `src/app` structure) Defines the various entry points of the extension.

## Technology Stack

-   **Framework**: WXT (Vite + React)
-   **UI**: React
-   **Styling**: Likely Tailwind CSS or standard CSS, potentially using shared components from **[packages/ui/web](mdc:packages/ui/web)** or a dedicated UI set.
-   **Messaging**: WXT's built-in messaging system or `webext-bridge`.
-   **Storage**: Browser Extension Storage APIs (e.g., `chrome.storage`).

## Key Conventions & Integrations

-   Follows the general **[Code Conventions](mdc:.cursor/rules/02-code-conventions.mdc)**.
-   Integrates with shared packages:
    -   **[auth](mdc:packages/auth)** for user authentication (potentially via background scripts or API calls).
    -   **[api](mdc:packages/api)** client (likely used from background or UI pages) for backend communication.
    -   **[ui/web](mdc:packages/ui/web)** might be used for UI consistency if applicable.
    -   **[analytics/extension](mdc:packages/analytics/extension)** for analytics.
    -   **[shared](mdc:packages/shared)** for common utilities.
-   Relies on WXT for building and managing the manifest file (`manifest.json`).

## Extension Concepts

-   **Background Script (`src/app/background`)**: Handles long-running tasks, browser event listeners, and core logic.
-   **Content Scripts (`src/app/content`)**: Run in the context of web pages, allowing interaction with the page's DOM and communication with the background script.
-   **Popup (`src/app/popup`)**: A small window opened when the user clicks the extension icon.
-   **Options Page (`src/app/options`)**: A full-tab page for configuring the extension.
-   **Side Panel (`src/app/sidepanel`)**: A panel displayed alongside web pages (Manifest V3 feature).
-   **Messaging**: Communication between different parts of the extension (background, content scripts, UI pages) is crucial.

## Guidance

-   When dealing with UI (popup, options, sidepanel), look in `apps/extension/src/components` and relevant `src/app` subdirectories. Also check if `packages/ui/web` is utilized.
-   Core extension logic often resides in the **background script**.
-   **Content scripts** are key for interacting with web page content.
-   Understand the communication flow: how do content scripts, UI pages, and background scripts **message** each other? Look for utilities in `src/lib/messaging` or WXT's built-in functions.
-   Authentication might involve background communication with the API or specific browser flows.
-   Check `wxt.config.ts` for build configuration and manifest definitions.
