---
description: 
globs: 
alwaysApply: true
---
## Code Style and Structure

- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`)
- Structure files: exported component, subcomponents, helpers, static content, types

## Naming Conventions

- Use lowercase with dashes for directories (e.g., `components/auth-wizard`)
- Favor named exports for components

## TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use maps instead
- Use functional components with TypeScript interfaces

## Syntax and Formatting

- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements
- Use declarative JSX

## Error Handling and Validation

- Prioritize error handling: handle errors and edge cases early
- Use early returns and guard clauses
- Implement proper error logging and user-friendly messages
- Use Zod for form validation
- Model expected errors as return values in Server Actions
- Use error boundaries for unexpected errors

## Guidance

-   Apply these conventions when generating or modifying code.
-   Pay close attention to naming, TypeScript usage (interfaces over types, no enums), and error handling patterns (early returns, Zod).
-   Ensure new code adheres to the functional and declarative style.